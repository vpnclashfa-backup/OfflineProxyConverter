# .github/workflows/build.yml
# نام گردش کار
name: Build and Release Subconverter Desktop

# زمانبندی و رویدادهای اجرا
on:
  schedule:
    # هر سه روز یک بار در نیمه‌شب (UTC) اجرا می‌شود
    - cron: '0 0 */3 * *'
  # اجازه می‌دهد که به صورت دستی این گردش کار را اجرا کنید
  workflow_dispatch:

# تعریف Jobها
jobs:
  # Job برای ساخت برنامه ویندوز
  build-windows:
    # از آخرین نسخه ویندوز برای اجرای Job استفاده کنید
    runs-on: windows-latest

    # مراحل Job
    steps:
    # مرحله: دریافت کد مخزن
    - name: Checkout code
      uses: actions/checkout@v4

    # مرحله: تنظیم Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        # استفاده از Node.js نسخه 20
        node-version: '20'

    # مرحله: دریافت اطلاعات آخرین Release موتور subconverter
    - name: Get latest subconverter release info
      id: get_subconverter_release # شناسه این مرحله برای ارجاع در مراحل بعدی
      run: |
        # کوئری زدن به GitHub API برای دریافت اطلاعات آخرین Release پروژه metacubex/subconverter
        # از GITHUB_TOKEN برای احراز هویت استفاده می‌کنیم تا محدودیت نرخ API را کاهش دهیم
        $response = Invoke-RestMethod -Uri "https://api.github.com/repos/metacubex/subconverter/releases/latest" -Headers @{Authorization = "token ${{ secrets.GITHUB_TOKEN }}"}
        # نام تگ آخرین Release (مثلاً v0.7.2)
        $latest_tag = $response.tag_name
        # پیدا کردن URL دانلود فایل ZIP ویندوز AMD64 از بین Assetهای Release
        # اطمینان حاصل کنید که نام فایل شامل "windows-amd64" و ".zip" باشد
        $asset_url = $response.assets | Where-Object { $_.name -like "*windows-amd64*.zip" } | Select-Object -ExpandProperty browser_download_url
        
        # ذخیره تگ و URL دانلود در متغیرهای محیطی GitHub Actions برای استفاده در مراحل بعدی
        echo "LATEST_SUB_TAG=$latest_tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "SUB_ASSET_URL=$asset_url" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      # استفاده از PowerShell برای اجرای دستورات ویندوز
      shell: powershell

    # مرحله: دانلود و استخراج subconverter.exe
    - name: Download subconverter.exe
      run: |
        # بررسی می‌کنیم که آیا URL دانلود پیدا شده است یا خیر
        if ("${{ env.SUB_ASSET_URL }}" -eq "") {
          Write-Error "Could not find subconverter Windows AMD64 zip asset URL."
          exit 1
        }
        # دانلود فایل ZIP subconverter
        Invoke-WebRequest -Uri "${{ env.SUB_ASSET_URL }}" -OutFile "subconverter_release.zip"
        # استخراج فایل ZIP به پوشه فعلی
        Expand-Archive -Path "subconverter_release.zip" -DestinationPath "."
        # پیدا کردن پوشه استخراج شده (معمولاً نامی شبیه subconverter-windows-amd64-vX.Y.Z دارد)
        $extractedPath = (Get-ChildItem -Path . -Directory -Filter "subconverter-windows-amd64-*").FullName
        if ($extractedPath) {
          # انتقال subconverter.exe به روت پروژه
          Move-Item -Path "$extractedPath\subconverter.exe" -Destination "subconverter.exe"
          # حذف پوشه استخراج شده
          Remove-Item -Recurse -Force $extractedPath
        } else {
          # اگر فایل .exe مستقیماً در ZIP بود یا ساختار پوشه متفاوت بود
          if (!(Test-Path "subconverter.exe")) {
             Write-Error "subconverter.exe not found after extraction. Please check the zip content."
             exit 1
          }
        }
        # حذف فایل ZIP دانلود شده
        Remove-Item -Force "subconverter_release.zip"
      shell: powershell

    # مرحله: نصب وابستگی‌های پروژه (Node.js, React, Electron)
    - name: Install dependencies
      run: npm install

    # مرحله: Build برنامه Electron برای ویندوز
    - name: Build Electron application for Windows
      # این دستور شامل Build کردن React و سپس پکیج کردن برنامه Electron می‌شود
      run: npm run build

    # مرحله: ایجاد Release در GitHub
    - name: Create Release
      id: create_release # شناسه این مرحله
      uses: actions/create-release@v1
      env:
        # توکن GitHub برای احراز هویت و دسترسی به API (به صورت خودکار توسط GitHub فراهم می‌شود)
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # نام تگ منحصر به فرد برای Release
        # شامل نسخه subconverter و شماره Build گردش کار
        tag_name: subconverter-desktop-${{ env.LATEST_SUB_TAG }}-${{ github.run_number }}
        # نام Release قابل مشاهده در GitHub
        release_name: Subconverter Desktop with ${{ env.LATEST_SUB_TAG }} (Build ${{ github.run_number }})
        # توضیحات Release
        body: |
          این یک بیلد خودکار از برنامه دسکتاپ Subconverter است که شامل موتور تبدیل Subconverter نسخه ${{ env.LATEST_SUB_TAG }} می‌باشد.
          این Release هر سه روز یک بار به‌روزرسانی می‌شود.
        # Release پیش‌نویس نباشد (یعنی بلافاصله منتشر شود)
        draft: false
        # Release پیش‌انتشار نباشد
        prerelease: false

    # مرحله: آپلود فایل ZIP برنامه به Release
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # URL برای آپلود فایل به Release (از خروجی مرحله create_release)
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # مسیر فایل ZIP ساخته شده توسط electron-builder (نام فایل بر اساس package.json)
        asset_path: ./dist/Subconverter Desktop-1.0.0-win.zip
        # نام فایل ZIP در Release، شامل نسخه subconverter
        asset_name: Subconverter_Desktop_Win-${{ env.LATEST_SUB_TAG }}.zip
        # نوع محتوای فایل
        asset_content_type: application/zip
